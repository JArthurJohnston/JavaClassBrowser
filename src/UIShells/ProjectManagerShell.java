package UIShells;

import Exceptions.NothingSelectedException;
import Models.ProjectModel;
import UIModels.ProjectManagerShellModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**

 * @author Arthur
 */
public class ProjectManagerShell extends javax.swing.JFrame {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        projectList = new javax.swing.JList();
        projectInfo = new javax.swing.JTextField();
        addProjectButton = new javax.swing.JButton();
        removeProjectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(projectList);

        projectInfo.setEditable(false);

        addProjectButton.setText("+");
        addProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProjectButtonActionPerformed(evt);
            }
        });

        removeProjectButton.setText("-");
        removeProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProjectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projectInfo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(removeProjectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addProjectButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(projectInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addProjectButton)
                    .addComponent(removeProjectButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProjectButtonActionPerformed
        model.openAddProject();
    }//GEN-LAST:event_addProjectButtonActionPerformed

    private void removeProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProjectButtonActionPerformed
        try {
            model.removeProject(this.getSelection());
        } catch (NothingSelectedException ex) {
            JOptionPane.showMessageDialog(null, ex, "No Selection Warning", WIDTH, null);
        }
    }//GEN-LAST:event_removeProjectButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProjectButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField projectInfo;
    private javax.swing.JList projectList;
    private javax.swing.JButton removeProjectButton;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel projects;
    ProjectManagerShellModel model;
    private static String defaultProjectDescription = 
                "Project Name:\nAuthor: \nDate Created: \nNumber of Packages: 1\nNumber of Classes: 0";
    
    public ProjectManagerShell(ProjectManagerShellModel model){
        projects = new DefaultListModel();
        initComponents();
        this.model = model;
        projectList.setModel(model.getListModel());
        if(model.getSelected() != null) {
            projectInfo.setText(model.getSelected().getDescription());
        }
        else {
            projectInfo.setText(defaultProjectDescription);
        }
    }
    
    private ProjectModel getSelection() throws NothingSelectedException{
        ProjectModel selection = (ProjectModel)projectList.getSelectedValue();
        if(selection == null) {
            throw new NothingSelectedException(ProjectModel.getSelectionString());
        } else {
            return selection;
        }
    }
    
    private boolean hasSelection(){
        return projectList.getSelectedValue() != null;
    }
}
